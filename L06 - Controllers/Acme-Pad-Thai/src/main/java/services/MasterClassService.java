package services;


import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.springframework.util.Assert;

import domain.Actor;
import domain.Administrator;
import domain.Cook;
import domain.LearningMaterial;
import domain.MasterClass;
import domain.Message;
import repositories.MasterClassRepository;

@Service
@Transactional
public class MasterClassService {
	


	//Constructor
	public MasterClassService(){
		super();
	}
	
	//Managed Repository
	@Autowired
	private MasterClassRepository masterClassRepository;
	
	//Auxiliary Services
	
	@Autowired
	private CookService cookService;
	
	@Autowired
	private ActorService actorService;
	
	@Autowired
	private AdministratorService adminService;
	

	@Autowired
	private MessageService messageService;
	//CRUD
	
	public MasterClass create(){
		MasterClass result = new MasterClass();
		Cook cook;
		cook = cookService.findByPrincipal();
		result.setCook(cook);
		result.setActors(new ArrayList<Actor>());
		result.setLearningMaterials(new ArrayList<LearningMaterial>());

		result.setDeleted(false);
		result.setPromoted(false);
		return result;
	}
	
	public MasterClass findOneToEdit(int id){
		MasterClass result;
		result = masterClassRepository.findOne(id);
		Assert.notNull(result);
		checkPrincipalCook(result);
		return result;
	}
	
	public MasterClass findOne(int id){
		
		return masterClassRepository.findOne(id);
	}
	
	public MasterClass save(MasterClass masterClass){
		MasterClass result;
		checkPrincipalCook(masterClass);
		result = masterClassRepository.save(masterClass);
		return result;
	}
	
	public void delete(MasterClass masterClass){
		checkPrincipalCook(masterClass);
		Administrator admin;
		masterClass.setDeleted(true);
		masterClassRepository.save(masterClass);
		Message message;
		for(Actor a:masterClass.getActors()){
			message = messageService.create(a);
			message.setTitle(masterClass.getTitle()+ " has been deleted");
			message.setBody("This is an autogenerated message to notify you that a masterClass you are enrolled into has been deleted from the system.");
			admin = adminService.findSystem();
			message.setSender(admin);
			messageService.send(message);
		}
	}
	
	public Collection<MasterClass> findAll(){
		Collection<MasterClass> result;
		result = masterClassRepository.findAll();
		return result;
	}
	
	public Collection<MasterClass> findEnrolledByPrincipal(){
		Actor actor;
		Collection<MasterClass> result;
		actor = actorService.findByPrincipal();
		result = masterClassRepository.findMasterClassesByActor(actor.getId());
		
		return result;
	}
	
	public Collection<MasterClass> findImpartedByPrincipal(){
		Cook cook;
		Collection<MasterClass> result;
		cook = cookService.findByPrincipal();

		result = masterClassRepository.findAllByCookId(cook.getId());
		return result;
	}
	

	//Business Methods
	

	public void promoteDemote(int masterClassId){
		MasterClass masterClass;
		masterClass = masterClassRepository.findOne(masterClassId);
		adminService.checkAdministrator();
		masterClass.setPromoted(!masterClass.getPromoted());
		masterClassRepository.save(masterClass);
	}
	
	
	public void checkPrincipalCook(MasterClass masterClass){
		Cook cook;
		cook = cookService.findByPrincipal();
		Assert.isTrue(masterClass.getCook().equals(cook));
	}
	
	
	public Long countNumberPromotedMasterClasses(){
		adminService.checkAdministrator();
		Long result;
		result = masterClassRepository.countNumberPromotedMasterClasses();
		return result;
	}
	
	public	Collection<Cook> findCooksOrderByPromotedMasterClasses(){
		adminService.checkAdministrator();
		Collection<Cook> result;
		result = masterClassRepository.findCooksOrderByPromotedMasterClasses();
		return result;
	}
	
	public Double[][] calculateAvgPromotedAndDemotedMasterClassesPerCook(){
		adminService.checkAdministrator();
		Double[][] result;
		result = masterClassRepository.calculateAvgPromotedAndDemotedMasterClassesPerCook();
		return result;
	}
	
	public Double calculateAvgLearningMaterialsPerMasterClass(){
		adminService.checkAdministrator();
		Double result;
		result = masterClassRepository.calculateAvgLearningMaterialsPerMasterClass();
		return result;
	}
	
	public void checkEnrolled(int id){
		Actor actor;
		MasterClass masterClass;
		masterClass = masterClassRepository.findOne(id);
		actor = actorService.findByPrincipal();
		Assert.isTrue(masterClass.getActors().contains(actor));
	}


}
