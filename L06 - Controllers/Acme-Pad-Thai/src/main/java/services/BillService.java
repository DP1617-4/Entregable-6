package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.joda.time.DateTime;
import org.joda.time.Days;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.BillRepository;
import domain.Administrator;
import domain.Banner;
import domain.Bill;
import domain.Folder;
import domain.Message;
import domain.Sponsor;

@Service
@Transactional
public class BillService {

	// managed repository---------------------
	@Autowired
	private BillRepository billRepository;

	// supporting services -------------------
	@Autowired
	private SponsorService sponsorService;

	@Autowired
	private AdministratorService administratorService;

	@Autowired
	private BannerService bannerService;

	@Autowired
	private MessageService messageService;

	@Autowired
	private FolderService folderService;

	// Basic CRUD methods --------------------
	public Bill create() {
		Bill created;
		created = new Bill();

		return created;
	}

	public Bill findOne(int billId) {
		Bill retrieved;
		retrieved = billRepository.findOne(billId);
		return retrieved;
	}

	public Bill findOneToEdit(int id) {
		Bill res;
		res = billRepository.findOne(id);
		Assert.notNull(res);
		checkPrincipalSponsor(res);
		return res;
	}

	public Collection<Bill> findAll() {
		Collection<Bill> bills;
		bills = billRepository.findAll();
		return bills;
	}

	public Bill save(Bill bill) {
		Sponsor sponsor = sponsorService.findByPrincipal();
		Assert.notNull(sponsor, "Dear user, you are not a sponsor.");
		Bill saved;
		saved = billRepository.save(bill);
		return saved;
	}

	public void delete(Bill bill) {
		billRepository.delete(bill);
	}

	// Auxiliary methods ---------------------

	// Our other bussiness methods -----------
	public void checkPrincipalSponsor(Bill b) {
		Sponsor sponsor;
		sponsor = sponsorService.findByPrincipal();
		Assert.isTrue(b.getSponsor().equals(sponsor));
	}
<<<<<<< HEAD

	public Double[][][] calculateAvgDevPaidAndUnpaidBills() {
=======
	
	public Double[] calculateAvgDevPaidAndUnpaidBills() {
>>>>>>> refs/remotes/origin/master
		return billRepository.calculateAvgDevPaidAndUnpaidBills();
	}

	public Bill payBill(Bill bill) { // Requirement 33.3
		Sponsor sponsor = sponsorService.findByPrincipal();
		Assert.notNull(sponsor, "Dear user, you are not a sponsor.");
		Date moment = new Date(System.currentTimeMillis() - 100);
		bill.setPaymentDate(moment);
		Bill saved = this.save(bill);
		return saved;
	}

	public Collection<Bill> computeProcedureMonthlyBills() { // Requirement 34.2
		administratorService.checkAdministrator();
		Date moment = new Date(System.currentTimeMillis() - 1);
		Double cost;
		Collection<Banner> banners;
		Collection<Sponsor> sponsors;
		Collection<Bill> bills = new ArrayList<Bill>();
		Bill temporal;
		sponsors = sponsorService.findAll();
		for (Sponsor s : sponsors) {
			cost = billRepository.computeBillCost(s.getId());
			Bill bill = create();
			String description = "";
			bill.setCost(cost);
			bill.setCreationDate(moment);
			banners = bannerService.paidBanners(s.getId());
			for (Banner b : banners) {
				description += b.getURL() + " ";
				b.setTimesShownMonth(0);
				bannerService.save(b);
			}
			bill.setDescription(description);
			bill.setSponsor(s);
			if (bill.getDescription() != "") {
				temporal = billRepository.save(bill);
				bills.add(temporal);
			}

		}
		return bills;

	}

	public void sendMessageSponsors() { // Requirement 34.3
		administratorService.checkAdministrator();
		Message message;
		Collection<Bill> bills;
		Date moment = new Date(System.currentTimeMillis() - 1);
		Folder outbox;
		Administrator admin;
		admin = administratorService.findSystem();
		outbox = folderService.findSystemFolder(admin, "outbox");
		bills = billRepository.unpaidBills();
		for (Bill b : bills) {
			if (b.getPaymentDate() == null) {
				int days = Days.daysBetween(new DateTime(b.getCreationDate()),
						new DateTime(moment)).getDays();
				if (days > 30) {
					message = messageService.create(b.getSponsor());
					message.setSender(admin.getUserAccount());
					message.setFolder(outbox);
					message.setPriority("HIGH");
					message.setTitle("A bill has not been paid.");
					message.setBody("This is an autogenerated message to notify you that you have not paid the bill created on: "
							+ b.getCreationDate());
					messageService.sendAutogenerated(message);
				}
			}
		}
	}

	public Collection<Bill> findAllByPrincipal() { // Browse his monthly bills
		Sponsor sponsor = sponsorService.findByPrincipal();
		Assert.notNull(sponsor, "Dear user, you are not a sponsor.");
		Collection<Bill> bills;
		bills = billRepository.findBillBySponsor(sponsor.getId());
		return bills;
	}
}
